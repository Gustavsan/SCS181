{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "82a8e1cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ext_euclid_algor(a, b):\n",
    "    # алгоритм Евклида используется для обратного вычисления\n",
    "    if b == 0:\n",
    "        return a, 1, 0\n",
    "    else:\n",
    "        d, xx, yy = ext_euclid_algor(b, a % b)\n",
    "        x = yy\n",
    "        y = xx - (a // b) * yy\n",
    "        return d, x, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "745ff55e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def inverse(a, n):\n",
    "    #инверсия а по mod n\n",
    "    return int(ext_euclid_algor(a, n)[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "1deaf742",
   "metadata": {},
   "outputs": [],
   "source": [
    "def step1(x, a, b, tuple):\n",
    "    #Поллардский шаг\n",
    "    G, H, P, Q = tuple[0], tuple[1], tuple[2], tuple[3]\n",
    "\n",
    "    sub = lift(x) % 3 # Subsets\n",
    "\n",
    "    if sub == 0:\n",
    "        x = x*G % P\n",
    "        a = (a+1) % Q\n",
    "\n",
    "    if sub == 1:\n",
    "        x = x * H % P\n",
    "        b = (b + 1) % Q\n",
    "\n",
    "    if sub == 2:\n",
    "        x = x*x % P\n",
    "        a = a*2 % Q\n",
    "        b = b*2 % Q\n",
    "    return x, a, b\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c440cadd",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "def step2(x, a, b, tuple):\n",
    "    #Поллардский шаг\n",
    "    G, H, P, Q = tuple[0], tuple[1], tuple[2], tuple[3]\n",
    "    \n",
    "    l = np.random.randint(1, G)\n",
    "    k = np.random.randint(1, G)\n",
    "    L = pow(G, l)\n",
    "    K = pow(H, k)\n",
    "\n",
    "    \n",
    "    sub = lift(x) % 3 # Subsets\n",
    "\n",
    "    if sub == 0:\n",
    "        x = x*L % P\n",
    "        a = (a+l) % Q\n",
    "        b=b\n",
    "\n",
    "    if sub == 1:\n",
    "        x = x * K % P\n",
    "        b = (b + l) % Q\n",
    "        a = a % Q\n",
    "        \n",
    "    if sub == 2:\n",
    "        x = x*x % P\n",
    "        a = a*2 % Q\n",
    "        b = b*2 % Q\n",
    "    return x, a, b\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f8b8d0d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "def step3(x, a, b, tuple):\n",
    "    #Поллардский шаг\n",
    "    G, H, P, Q = tuple[0], tuple[1], tuple[2], tuple[3]\n",
    "    l = []\n",
    "    k = []\n",
    "    i = 0\n",
    "    while i<20:\n",
    "        l.append(np.random.randint(1, G))\n",
    "        k.append(np.random.randint(1, G))\n",
    "        i+=1\n",
    "        \n",
    "    i = 0\n",
    "    sub = lift(x) % 20 # Subsets\n",
    "    \n",
    "    L = pow(G, l[sub]) * pow(H, k[sub])\n",
    "    x = x*L % P\n",
    "    a = (a + l[sub]) % Q\n",
    "    b = (b + k[sub]) % Q \n",
    "    \n",
    "    \n",
    "    return x, a, b\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "3e80b8c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def step4(x, a, b, tuple):\n",
    "    #Поллардский шаг\n",
    "    G, H, P, Q = tuple[0], tuple[1], tuple[2], tuple[3]\n",
    "    l = []\n",
    "    k = []\n",
    "    i = 0\n",
    "    while i<20:\n",
    "        l.append(np.random.randint(1, G))\n",
    "        k.append(np.random.randint(1, G))\n",
    "        i+=1\n",
    "    u1 = -1\n",
    "    u2 = -1\n",
    "    u3 = -1\n",
    "    u4 = -1\n",
    "    while u1 == u2 or u1 == u3 or u1 == u4 or u2 == u3 or u2 == u4 or u3 == u4: \n",
    "        u1 = np.random.randint(1, G)\n",
    "        u2 = np.random.randint(1, G)\n",
    "        u3 = np.random.randint(1, G)\n",
    "        u4 = np.random.randint(1, G)\n",
    "    \n",
    "    i = 0\n",
    "    sub = lift(x) % 20 # Subsets\n",
    "    if sub != u1 or sub != u2 or sub != u3 or sub != u4:\n",
    "        L = pow(G, l[sub]) * pow(H, k[sub])\n",
    "        x = x*L % P\n",
    "        a = (a + l[sub]) % Q\n",
    "        b = (b + k[sub]) % Q \n",
    "    else:\n",
    "        x = x * x\n",
    "        a = (2 * a) % Q\n",
    "        b = (2 * b) % Q\n",
    "        \n",
    "    \n",
    "    return x, a, b\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "e623c52d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pollard1(G, H, P):\n",
    "    #G-генератор\n",
    "    #H\n",
    "    #P-простое число\n",
    "    opCount = 0\n",
    "    \n",
    "    Q = int((P - 1) // 2)  # подгруппа\n",
    "    x = G*H\n",
    "    a = 1\n",
    "    b = 1\n",
    "\n",
    "    X = x\n",
    "    A = a\n",
    "    B = b\n",
    "    \n",
    "    for i in range(1, P):\n",
    "        #Ёж\n",
    "        x, a, b = step1(x, a, b, (G, H, P, Q))\n",
    "        opCount += 1\n",
    "        #Заяц\n",
    "        X, A, B = step1(X, A, B, (G, H, P, Q))\n",
    "        opCount += 1\n",
    "        X, A, B = step1(X, A, B, (G, H, P, Q))\n",
    "        opCount += 1\n",
    "\n",
    "        if x == X:\n",
    "            break\n",
    "        \n",
    "    nom = a-A\n",
    "    denom = B-b\n",
    "    #Необходимо вычислить обратное значение, чтобы правильно вычислить дробь по модулю q.\n",
    "    res = (inverse(denom, Q) * nom) % Q\n",
    "\n",
    "    if verify(G, H, P, res):\n",
    "        return res, opCount\n",
    "\n",
    "    return res + Q, opCount\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c38fea8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pollard2(G, H, P):\n",
    "    #G-генератор\n",
    "    #H\n",
    "    #P-простое число\n",
    "    opCount = 0\n",
    "    \n",
    "    Q = int((P - 1) // 2)  # подгруппа\n",
    "    x = G*H\n",
    "    a = 1\n",
    "    b = 1\n",
    "\n",
    "    X = x\n",
    "    A = a\n",
    "    B = b\n",
    "    \n",
    "    for i in range(1, P):\n",
    "        #Ёж\n",
    "        x, a, b = step2(x, a, b, (G, H, P, Q))\n",
    "        opCount += 1\n",
    "        #Заяц\n",
    "        X, A, B = step2(X, A, B, (G, H, P, Q))\n",
    "        opCount += 1\n",
    "        X, A, B = step2(X, A, B, (G, H, P, Q))\n",
    "        opCount += 1\n",
    "\n",
    "        if x == X:\n",
    "            break\n",
    "        \n",
    "    nom = a-A\n",
    "    denom = B-b\n",
    "    #Необходимо вычислить обратное значение, чтобы правильно вычислить дробь по модулю q.\n",
    "    res = (inverse(denom, Q) * nom) % Q\n",
    "\n",
    "    if verify(G, H, P, res):\n",
    "        return res, opCount\n",
    "\n",
    "    return res + Q, opCount\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b9cc96ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pollard3(G, H, P):\n",
    "    #G-генератор\n",
    "    #H\n",
    "    #P-простое число\n",
    "    opCount = 0\n",
    "    \n",
    "    Q = int((P - 1) // 2)  # подгруппа\n",
    "    x = G*H\n",
    "    a = 1\n",
    "    b = 1\n",
    "\n",
    "    X = x\n",
    "    A = a\n",
    "    B = b\n",
    "    \n",
    "    for i in range(1, P):\n",
    "        x, a, b = step3(x, a, b, (G, H, P, Q))\n",
    "        opCount += 1\n",
    "        X, A, B = step3(X, A, B, (G, H, P, Q))\n",
    "        opCount += 1\n",
    "        X, A, B = step3(X, A, B, (G, H, P, Q))\n",
    "        opCount += 1\n",
    "\n",
    "        if x == X:\n",
    "            break\n",
    "        \n",
    "    nom = a-A\n",
    "    denom = B-b\n",
    "    #Необходимо вычислить обратное значение, чтобы правильно вычислить дробь по модулю q.\n",
    "    res = (inverse(denom, Q) * nom) % Q\n",
    "\n",
    "    if verify(G, H, P, res):\n",
    "        return res, opCount\n",
    "\n",
    "    return res + Q, opCount\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "69003841",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pollard4(G, H, P):\n",
    "    #G-генератор\n",
    "    #H\n",
    "    #P-простое число\n",
    "    opCount = 0\n",
    "    \n",
    "    Q = int((P - 1) // 2)  # подгруппа\n",
    "    x = G*H\n",
    "    a = 1\n",
    "    b = 1\n",
    "\n",
    "    X = x\n",
    "    A = a\n",
    "    B = b\n",
    "    \n",
    "    for i in range(1, P):\n",
    "        #Ёж\n",
    "        x, a, b = step4(x, a, b, (G, H, P, Q))\n",
    "        opCount += 1\n",
    "        #Заяц\n",
    "        X, A, B = step4(X, A, B, (G, H, P, Q))\n",
    "        opCount += 1\n",
    "        X, A, B = step4(X, A, B, (G, H, P, Q))\n",
    "        opCount += 1\n",
    "\n",
    "        if x == X:\n",
    "            break\n",
    "        \n",
    "    nom = a-A\n",
    "    denom = B-b\n",
    "    #Необходимо вычислить обратное значение, чтобы правильно вычислить дробь по модулю q.\n",
    "    res = (inverse(denom, Q) * nom) % Q\n",
    "\n",
    "    if verify(G, H, P, res):\n",
    "        return res, opCount\n",
    "\n",
    "    return res + Q, opCount\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "147caf4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def verify(g, h, p, x):\n",
    "    #Проверяет заданный набор g, h, p и x\n",
    "    return pow(g, int(x), p) == h"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "042e1884",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n",
      "18\n",
      "19\n",
      "[[0.00034689903259277344, 9.822845458984375e-05, 0.00042176246643066406, 0.00011801719665527344, 0.0004608631134033203, 0.0006537437438964844, 0.0010986328125, 0.0004684925079345703, 0.0005865097045898438, 0.00199127197265625, 0.0045621395111083984, 0.006134986877441406, 0.0026373863220214844, 0.003795146942138672, 0.014660358428955078], [0.007293224334716797, 0.0007696151733398438, 0.010759592056274414, 0.03950023651123047, 0.04629397392272949, 0.08526086807250977, 0.01108551025390625, 0.012731313705444336, 0.029937744140625, 0.021947860717773438, 0.5112199783325195, 0.19187498092651367, 2.5103070735931396, 3.786053419113159, 20.3322012424469], [0.04786944389343262, 0.008258819580078125, 0.04816174507141113, 0.0020949840545654297, 0.5705082416534424, 0.323472261428833, 1.9187703132629395, 2.3329644203186035, 0.06703305244445801, 1.5301806926727295, 8.436009407043457, 6.051910400390625, 6.966766119003296, 175.67547011375427, 395.18510007858276], [0.036438941955566406, 0.02779555320739746, 0.14207172393798828, 0.018241167068481445, 0.6303024291992188, 1.1482038497924805, 2.1006581783294678, 0.18091320991516113, 0.03968691825866699, 2.90712833404541, 1.5606694221496582, 21.000721216201782, 39.42337894439697, 23.718202829360962, 508.9484143257141]]\n",
      "Operations invoked: 1572924\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "jj=5\n",
    "sptime = [[],[],[],[]]\n",
    "spoperation = [[],[],[],[]]\n",
    "\n",
    "while jj < 20:\n",
    "    print(jj)\n",
    "    M = next_prime(2 ** jj)\n",
    "    A = Mod(ZZ.random_element(M), M)\n",
    "    B = A ** ZZ.random_element(M - 1)\n",
    "\n",
    "    t1 = time.time()\n",
    "\n",
    "    res, opCount = pollard1(A, B, M)\n",
    "\n",
    "    t2 = time.time()\n",
    "    sptime[0].append((t2 - t1))\n",
    "    spoperation[0].append(opCount)\n",
    "    t1 = time.time()\n",
    "\n",
    "    res, opCount = pollard2(A, B, M)\n",
    "\n",
    "    t2 = time.time()\n",
    "    sptime[1].append((t2 - t1))\n",
    "    spoperation[1].append(opCount)\n",
    "    t1 = time.time()\n",
    "\n",
    "    res, opCount = pollard3(A, B, M)\n",
    "\n",
    "    t2 = time.time()\n",
    "    sptime[2].append((t2 - t1))\n",
    "    spoperation[2].append(opCount)\n",
    "    t1 = time.time()\n",
    "\n",
    "    res, opCount = pollard4(A, B, M)\n",
    "\n",
    "    t2 = time.time()\n",
    "    sptime[3].append((t2 - t1))\n",
    "    spoperation[3].append(opCount)\n",
    "    jj+=1\n",
    "    # print('Time elapsed for 2 in',jj,'=', (t2 - t1))\n",
    "    # print('Operations invoked:', operationCount)\n",
    "print(sptime)\n",
    "print('Operations invoked:', opCount)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "275c9b92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.00034689903259277344, 9.822845458984375e-05, 0.00042176246643066406, 0.00011801719665527344, 0.0004608631134033203, 0.0006537437438964844, 0.0010986328125, 0.0004684925079345703, 0.0005865097045898438, 0.00199127197265625, 0.0045621395111083984, 0.006134986877441406, 0.0026373863220214844, 0.003795146942138672, 0.014660358428955078], [0.007293224334716797, 0.0007696151733398438, 0.010759592056274414, 0.03950023651123047, 0.04629397392272949, 0.08526086807250977, 0.01108551025390625, 0.012731313705444336, 0.029937744140625, 0.021947860717773438, 0.5112199783325195, 0.19187498092651367, 2.5103070735931396, 3.786053419113159, 20.3322012424469], [0.04786944389343262, 0.008258819580078125, 0.04816174507141113, 0.0020949840545654297, 0.5705082416534424, 0.323472261428833, 1.9187703132629395, 2.3329644203186035, 0.06703305244445801, 1.5301806926727295, 8.436009407043457, 6.051910400390625, 6.966766119003296, 175.67547011375427, 395.18510007858276], [0.036438941955566406, 0.02779555320739746, 0.14207172393798828, 0.018241167068481445, 0.6303024291992188, 1.1482038497924805, 2.1006581783294678, 0.18091320991516113, 0.03968691825866699, 2.90712833404541, 1.5606694221496582, 21.000721216201782, 39.42337894439697, 23.718202829360962, 508.9484143257141]]\n"
     ]
    }
   ],
   "source": [
    "print(sptime)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "c56fbf43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[24, 15, 84, 12, 42, 123, 207, 87, 108, 384, 882, 1152, 504, 738, 3492], [105, 27, 390, 768, 876, 3090, 168, 459, 1104, 804, 17238, 6432, 82647, 131940, 890046], [108, 24, 132, 3, 1560, 906, 4830, 5643, 192, 4302, 23238, 15606, 19185, 519153, 1348395], [90, 69, 333, 24, 1560, 2877, 4986, 405, 102, 7464, 3816, 49290, 102765, 71676, 1572924]]\n"
     ]
    }
   ],
   "source": [
    "print(spoperation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "58c3eccd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "7b7cecff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend object at 0x7fce87788af0>"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(sptime[0])\n",
    "plt.plot(sptime[1])\n",
    "plt.plot(sptime[2])\n",
    "plt.plot(sptime[3])\n",
    "plt.legend(['Оригинальный алгоритм', 'Линейный алгоритм', 'Линейный алгоритм', 'Комбинированный алгоритм'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0502c152",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "SageMath 9.5",
   "language": "sage",
   "name": "sagemath"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
